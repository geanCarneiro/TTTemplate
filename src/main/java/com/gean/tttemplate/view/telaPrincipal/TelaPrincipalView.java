/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gean.tttemplate.view.telaPrincipal;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.gean.tttemplate.Main;
import com.gean.tttemplate.utils.AlertFactory;
import com.gean.tttemplate.utils.Callback;
import com.gean.tttemplate.utils.FileResourceUtils;
import com.gean.tttemplate.utils.SingleWindowController;
import com.gean.tttemplate.utils.TaskWorker;
import com.gean.tttemplate.utils.TweetPreset;
import com.gean.tttemplate.utils.TweetPresetFactory;
import com.gean.tttemplate.utils.TwitterUtils;
import com.gean.tttemplate.view.createTweet.CreateTweetView;
import com.gean.tttemplate.view.tweetEmMassaImport.TweetEmMassaImportView;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javafx.application.Platform;
import javafx.scene.control.TreeItem;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.ProgressMonitor;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author GeanCarneiro
 */
public class TelaPrincipalView extends javax.swing.JFrame {
    
    private TaskWorker worker = null;
    protected SingleWindowController singleWindowController = new SingleWindowController();
    
    /**
     * Creates new form TelaPrincipalView
     */
    public TelaPrincipalView() {
        initComponents();
        configurarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTwitterPreset = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTrPresetList = new javax.swing.JTree();
        btnConnectar = new javax.swing.JButton();
        btnDesconectar = new javax.swing.JButton();
        btnTweetEmMassa = new javax.swing.JButton();
        btnGerenciarPresets = new javax.swing.JButton();
        btnRecarregarDados = new javax.swing.JButton();
        lblStatusConectado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TTTemplate");
        setIconImage(FileResourceUtils.getImageFromPath(FileResourceUtils.LOGO_FILE));

        lblTwitterPreset.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        lblTwitterPreset.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTwitterPreset.setText("TWITTER PRESETS");

        jTrPresetList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTrPresetList.setShowsRootHandles(true);
        jScrollPane1.setViewportView(jTrPresetList);

        btnConnectar.setText("Conectar ao Twitter...");
        btnConnectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectarActionPerformed(evt);
            }
        });

        btnDesconectar.setText("Desconectar do Twitter");
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });

        btnTweetEmMassa.setText("Tweet em massa");
        btnTweetEmMassa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTweetEmMassaActionPerformed(evt);
            }
        });

        btnGerenciarPresets.setText("Gerenciar Presets...");
        btnGerenciarPresets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerenciarPresetsActionPerformed(evt);
            }
        });

        btnRecarregarDados.setText("ðŸ”ƒ");
        btnRecarregarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarDadosActionPerformed(evt);
            }
        });

        lblStatusConectado.setText("{Conectado}");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTwitterPreset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDesconectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConnectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTweetEmMassa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGerenciarPresets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRecarregarDados)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatusConectado)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTwitterPreset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDesconectar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTweetEmMassa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGerenciarPresets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRecarregarDados)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatusConectado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnConnectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectarActionPerformed
        
        runTask(() -> {
            try {
                if(TwitterUtils.userOAuth()){
                        FileResourceUtils.saveObjectOnFile(FileResourceUtils.USER_INFO_FILE, Main.userInfo);
                    AlertFactory.createInformationAlert("Usuario conectado");
                } else {
                    AlertFactory.createInformationAlert("ConexÃ£o com Twitter/X cancelada");
                }
            } catch (Exception ex){
                AlertFactory.createErrorAlert("Ocorreu um erro ao tentar conectar: " + ex.getLocalizedMessage());
                throw ex;
            }
        });
    }//GEN-LAST:event_btnConnectarActionPerformed
        
    private void btnRecarregarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarDadosActionPerformed
        runTask(() -> {
            Main.listas = FileResourceUtils.getListas();
            Main.presets = FileResourceUtils.loadPreset();
            AlertFactory.createInformationAlert("Presets e listas recarregados");
        });
    }//GEN-LAST:event_btnRecarregarDadosActionPerformed

    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarActionPerformed
        runTask(() -> {
            Main.userInfo = null;

            new File(FileResourceUtils.USER_INFO_FILE).delete();
        });
    }//GEN-LAST:event_btnDesconectarActionPerformed

    private SwingWorker<Void, Integer> TweetEmMassworker;
    
    private void btnTweetEmMassaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTweetEmMassaActionPerformed
        
        if(TweetEmMassworker == null) {
            TweetEmMassworker = new SwingWorker<Void, Integer>() {
                
                private ProgressMonitor monitor;
                private int qt;
                private int progresso;
                
                @Override
                protected Void doInBackground() throws Exception {
                    
                    TreePath path = jTrPresetList.getSelectionPath();
                    if(path == null) return null;
                    DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) path.getLastPathComponent();

                    if(treeNode == null || !treeNode.isLeaf()) {
                            Platform.runLater(() -> AlertFactory.createInformationAlert("Selecione o template que deseja utilizar!"));
                            return null;
                    }

                    TweetPreset preset = (TweetPreset)treeNode.getUserObject();
                    
                    JFrame src = (JFrame) ((JButton) evt.getSource()).getParent();
                    // importar xls
                    File excelFile = TweetEmMassaImportView.showDialog(src, preset);
                    
                    // ETL - xls(x) para List<List<Map>>
                    if(excelFile != null) {
                        List<Map<String, String>> allParams = null;
                        try {
                            allParams = FileResourceUtils.xlsToList(excelFile);
                        } catch (Exception ex) {
                            Logger.getLogger(TelaPrincipalView.class.getName()).log(Level.SEVERE, null, ex);
                            throw ex;
                        }

                        publish(allParams.size());

                        if(!allParams.isEmpty()) {

                            // validar e corrige todas as midias
                            if(preset.getMidia()) {
                                    for(Map<String, String> params : allParams) {
                                            String midiaFileName = params.get(TweetPresetFactory.DEFAULT_MIDIA_LABEL);

                                            if(!midiaFileName.endsWith(".mp4")) midiaFileName = midiaFileName + ".mp4";

                                            final String midiaFileNameFinal = midiaFileName;

                                            if(!new File(excelFile.getParent() + File.separator + midiaFileName).exists()) {
                                                    Platform.runLater(() -> AlertFactory.createErrorAlert("O ARQUIVO " + midiaFileNameFinal.toUpperCase() + " NÃƒO EXISTE NA PASTA " + excelFile.getParent().toUpperCase()));
                                                    return null;
                                            }

                                            params.put(TweetPresetFactory.DEFAULT_MIDIA_LABEL, midiaFileName);
                                            publish(1);
                                    }
                            } else {
                                publish(qt);
                            }

                            // para cada registro
                            for(Map<String, String> params : allParams) {

                                // prepara os dados
                                String tweet = TweetPresetFactory.toTweetUpperCase(TweetPresetFactory.encode(preset.getPreset(), params));

                                File midia = new File(excelFile.getParent() + File.separator + params.get(TweetPresetFactory.DEFAULT_MIDIA_LABEL));

                                System.out.println("Postando tweet do registro:");
                                try {
                                    System.out.println(new ObjectMapper().writeValueAsString(params));
                                } catch (JsonProcessingException ex) { }

                                try{
                                    if(preset.getMidia())
                                        TwitterUtils.twittarComVideo(tweet, midia);
                                    else
                                        TwitterUtils.twittar(tweet);
                                } catch (Exception ex) {
                                    Logger.getLogger(TelaPrincipalView.class.getName()).log(Level.SEVERE, null, ex);
                                    ex.printStackTrace();
                                    AlertFactory.createErrorAlert("Erro ao gerar Tweet: " + ex.getLocalizedMessage());
                                    return null;
                                }
                                publish(1);
                            }

                        }
                    }

                    

                    
                    return null;
                }

                @Override
                protected void done() {
                    super.done(); //To change body of generated methods, choose Tools | Templates.
                    try {
                        this.get();
                        this.monitor.setProgress(this.monitor.getMaximum());
                        AlertFactory.createInformationAlert("Tweets concluidos com sucesso!");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Logger.getLogger(TelaPrincipalView.class.getName()).log(Level.SEVERE, null, ex);
                        AlertFactory.createErrorAlert(ex.getLocalizedMessage());
                    } finally {
                        TweetEmMassworker = null;
                    }
                }

                @Override
                protected void process(List<Integer> chunks) {
                    super.process(chunks); //To change body of generated methods, choose Tools | Templates.
                    
                    if(this.monitor == null){
                        this.qt = chunks.get(0);
                        this.monitor = new ProgressMonitor(null, "Gerando tweets a partir de Template", "Verificando midia", 0, qt*2);
                    } else {
                        for(int progresso : chunks){
                            this.progresso += progresso;
                            this.monitor.setProgress(this.progresso);
                            if(this.progresso >= this.qt) this.monitor.setNote("Postando Tweet");
                        }
                    }
                }
                
                
            };
            TweetEmMassworker.execute();
               
            
            
        }
        
    }//GEN-LAST:event_btnTweetEmMassaActionPerformed

    private void btnGerenciarPresetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerenciarPresetsActionPerformed
        AlertFactory.createErrorAlert("WIP");
    }//GEN-LAST:event_btnGerenciarPresetsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnectar;
    private javax.swing.JButton btnDesconectar;
    private javax.swing.JButton btnGerenciarPresets;
    private javax.swing.JButton btnRecarregarDados;
    private javax.swing.JButton btnTweetEmMassa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTrPresetList;
    private javax.swing.JLabel lblStatusConectado;
    private javax.swing.JLabel lblTwitterPreset;
    // End of variables declaration//GEN-END:variables

    private void configurarComponentes() {

        jTrPresetList.setRootVisible(false);

        update();
        jTrPresetList.setCellRenderer(new PresetsTreeCellRenderer());
        jTrPresetList.addMouseListener(new DblClickMouseListener(this));
        DefaultTreeSelectionModel selectionModel = new DefaultTreeSelectionModel();
        selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTrPresetList.setSelectionModel(selectionModel);
        
        
        this.pack();
    }
    
    public void update() {
		
        this.btnConnectar.setVisible(!Main.isConectado());
        this.btnDesconectar.setVisible(Main.isConectado());

        this.btnTweetEmMassa.setEnabled(Main.isConectado());

        if(Main.isConectado()) {                    
            this.lblStatusConectado.setText("Connectado como " + Main.userInfo.getUser().getName()+ " (@" +  Main.userInfo.getUser().getUsername()+ ")");
        } else {
            this.lblStatusConectado.setText("NÃ£o Connectado");
        }
        

        this.jTrPresetList.setModel(new PresetsTreeModel(Main.presets));

    }
    
    public void runTask(Callback task){
        
        if(this.worker == null) {
            this.worker = new TaskWorker(() -> {
                this.update();
                this.worker = null;
            }, task);
            this.worker.execute();
        }
        
    }
}

class DblClickMouseListener implements MouseListener {
    
    private TelaPrincipalView frameSrc;
    
    public DblClickMouseListener(TelaPrincipalView frameSrc) {
        this.frameSrc = frameSrc;
    }
    
    @Override
    public void mouseClicked(MouseEvent e) {
        if(e.getClickCount() < 2) return;
        
        JTree tree = (JTree) e.getSource();
        TreePath path = tree.getSelectionPath();
        if(path == null) return;
        
        DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) path.getLastPathComponent();
        if(treeNode == null || !treeNode.isLeaf()) return;
        TweetPreset selectedPreset = (TweetPreset) treeNode.getUserObject();
        
        SwingUtilities.invokeLater(() -> {
            CreateTweetView createTweetView = (CreateTweetView) this.frameSrc.singleWindowController.openWindow(new CreateTweetView());
            createTweetView.setPreset(selectedPreset);
        }); 
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }
    
}
