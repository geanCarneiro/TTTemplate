/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gean.tttemplate.view.createTweet;

import com.gean.tttemplate.Main;
import com.gean.tttemplate.utils.AlertFactory;
import com.gean.tttemplate.utils.Callback;
import com.gean.tttemplate.utils.FileResourceUtils;
import com.gean.tttemplate.utils.Param;
import com.gean.tttemplate.utils.TaskWorker;
import com.gean.tttemplate.utils.TweetPreset;
import com.gean.tttemplate.utils.TweetPresetFactory;
import com.gean.tttemplate.utils.TwitterUtils;
import java.awt.Component;
import java.io.File;
import java.util.HashMap;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.nio.file.Files;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;


/**
 *
 * @author GeanCarneiro
 */
public class CreateTweetView extends javax.swing.JFrame {
    
    
    private TweetPreset preset;
    private int charCount;
    private JLabel lblQtMidia;
    private HashMap<String, JComponent> campos = new HashMap<>();
    private List<File> midias;
    private TaskWorker worker;
    
    /**
     * Creates new form CreateTweetView
     * @param preset
     */
    public CreateTweetView() {
        initComponents();
        configurarComponents();
        update();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblCriarTweet = new javax.swing.JLabel();
        panelFormWapper = new javax.swing.JPanel();
        panelCriarTweetForm = new javax.swing.JPanel();
        jcbForcarMaiusculo = new javax.swing.JCheckBox();
        lblCounter = new javax.swing.JLabel();
        panelBotoes = new javax.swing.JPanel();
        btnGerarTweet = new javax.swing.JButton();
        btnCopiarTweet = new javax.swing.JButton();
        btnLimparCampos = new javax.swing.JButton();
        lblTemplate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Criar Tweet");
        setIconImage(FileResourceUtils.getImageFromPath(FileResourceUtils.LOGO_FILE));
        setResizable(false);

        lblCriarTweet.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblCriarTweet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCriarTweet.setText("Criar Tweet");

        panelFormWapper.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        panelFormWapper.setLayout(new java.awt.GridBagLayout());

        panelCriarTweetForm.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panelFormWapper.add(panelCriarTweetForm, gridBagConstraints);

        jcbForcarMaiusculo.setSelected(true);
        jcbForcarMaiusculo.setText("For√ßar Maiusculas");

        lblCounter.setText("Counter");

        btnGerarTweet.setText("Gerar Tweet");
        btnGerarTweet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarTweetActionPerformed(evt);
            }
        });

        btnCopiarTweet.setText("Copiar Tweet");
        btnCopiarTweet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopiarTweetActionPerformed(evt);
            }
        });

        btnLimparCampos.setText("Limpar Campos");
        btnLimparCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotoesLayout = new javax.swing.GroupLayout(panelBotoes);
        panelBotoes.setLayout(panelBotoesLayout);
        panelBotoesLayout.setHorizontalGroup(
            panelBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGerarTweet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopiarTweet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimparCampos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBotoesLayout.setVerticalGroup(
            panelBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGerarTweet)
                    .addComponent(btnCopiarTweet)
                    .addComponent(btnLimparCampos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblTemplate.setText("{template}");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelFormWapper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(lblCriarTweet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbForcarMaiusculo)
                            .addComponent(lblCounter)
                            .addComponent(lblTemplate))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCriarTweet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTemplate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFormWapper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jcbForcarMaiusculo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCounter)
                .addGap(22, 22, 22)
                .addComponent(panelBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparCamposActionPerformed
        runTask(this::limparCampos);
    }//GEN-LAST:event_btnLimparCamposActionPerformed

    private void btnCopiarTweetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopiarTweetActionPerformed
        runTask(() -> {
            String encodedTweet = doEncode();
            String tweet = this.jcbForcarMaiusculo.isSelected() ? TweetPresetFactory.toTweetUpperCase(encodedTweet) : encodedTweet;
            StringSelection selection = new StringSelection(tweet);
            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, selection);
            AlertFactory.createInformationAlert("Tweet copiado com sucesso!!");
			
        });
    }//GEN-LAST:event_btnCopiarTweetActionPerformed

    private void btnGerarTweetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarTweetActionPerformed
        runTask(() -> {
            String encodedTweet = doEncode();
            String tweet = this.jcbForcarMaiusculo.isSelected() ? TweetPresetFactory.toTweetUpperCase(encodedTweet) : encodedTweet;
                    try {
                            if(this.midias == null || this.midias.size() == 0) {
                                    TwitterUtils.twittar(tweet);
                            } else { 

                                    if (this.midias.size() == 1) {
                                            if(isImage(this.midias.get(0)))
                                                TwitterUtils.twittarComImagem(tweet, this.midias.get(0));
                                            else if(isVideo(this.midias.get(0)))
                                                TwitterUtils.twittarComVideo(tweet, this.midias.get(0));
                                             else {
                                                    SwingUtilities.invokeLater(() -> AlertFactory.createInformationAlert("ATEN√á√ÉO!! O ARQUIVO QUE VAI POSTAR DEVE SER UMA IMAGEM OU UM VIDEO!!")) ;
                                                    return;
                                            }
                                    } else {
                                            boolean isVideo = true;
                                            for(File f: this.midias) {
                                                    if(!isVideo(f)) isVideo = false;
                                            }
                                            if(isVideo)
                                                TwitterUtils.twittarComVariosVideos(tweet, this.midias.toArray(new File[0]));
                                            else {
                                                    SwingUtilities.invokeLater(() -> AlertFactory.createInformationAlert("ATEN√á√ÉO!! TODOS OS ARQUIVOS A POSTAR DEVEM SER VIDEOS!!"));
                                                    return;
                                            }
                                    }
                            }
                            SwingUtilities.invokeLater(() -> AlertFactory.createInformationAlert("Tweet feito com sucesso!!"));
                    } catch (Exception e) {
                            e.printStackTrace();
                            SwingUtilities.invokeLater(() -> AlertFactory.createErrorAlert("Erro ao postar Tweet!!"));
                    }

                    SwingUtilities.invokeLater(this::limparCampos) ;
        });
    }//GEN-LAST:event_btnGerarTweetActionPerformed
    
    private boolean isImage(File f) {
        try {
            String mimetype = Files.probeContentType(f.toPath());
            return mimetype.split("/")[0].equalsIgnoreCase("image");
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            return false;
        }
    }
    
    private boolean isVideo(File f) {
        try {
            String mimetype = Files.probeContentType(f.toPath());
            return mimetype.split("/")[0].equalsIgnoreCase("video");
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            return false;
        }
    }
    
    private void limparCampos(){
        this.campos.values().forEach(c -> {
                if (c instanceof JTextField) {
                    ((JTextField) c).setText("");
                } else if (c instanceof JComboBox) {
                        if(((JComboBox) c).getModel().getSize() > 0) ((JComboBox) c).setSelectedIndex(0);
                } else if (c instanceof JSpinner) {
                        ((JSpinner) c).setValue(0);
                } else if (c instanceof JTextArea) {
                        ((JTextArea) c).setText("");
                } else if (c instanceof JDatePickerImpl) {
                    ((JDatePickerImpl) c).getJFormattedTextField().setValue(new Date());
                    try{
                        ((JDatePickerImpl) c).getJFormattedTextField().commitEdit();
                    } catch(ParseException e) {
                        AlertFactory.createErrorAlert("Erro ao tentar resetar o DataPicker");
                        e.printStackTrace();
                    }
                }
            });

            if(this.preset.getMidia()) limparMidia();
    }
    
    public void update(){
        SwingUtilities.invokeLater(() -> {
            
            this.btnGerarTweet.setEnabled(Main.isConectado());
            this.pack(); 
         });
    }
    
    public void test(){
        this.pack();
    }
    
    private void gerarForm(){
        // garante que o panel e lista de campos est√£o vazio antes de gerar um novo
        this.panelCriarTweetForm.removeAll();
        this.campos.clear();
        
        List<Param> params = TweetPresetFactory.getParams(this.preset.getPreset());
        SwingUtilities.invokeLater(() -> addStruct(0));
        int rowIndex = 1;
        for(Param p : params) {

                JComponent input = new JLabel("NAN[input]");
                String rawLabel = "NAN";
                if(existeCampo(rawLabel)) continue;
                
                
                switch (p.getType()) {
                        case STRING:
                                rawLabel = p.getLabel();				
                                input = new JTextField();			
                                ((JTextField) input).getDocument().addDocumentListener(new DocumentListenerImpl(this));
                                ((JTextField) input).setColumns(Integer.max(15, ((JTextField) input).getColumns()));
                                break;
                        case LIST:
                                rawLabel = p.getLabel();
                                input = new JComboBox<>();
                                List<String> lista = ( List<String> ) p.getData();
                                DefaultComboBoxModel<String> stringComboBoxModel = new DefaultComboBoxModel<>(lista.toArray(new String[0]));
                                ((JComboBox)input).setModel(stringComboBoxModel);
                                if(!lista.isEmpty()) ((JComboBox)input).setSelectedIndex(0);
                                ((JComboBox) input).addActionListener((e) -> updateCountText());
                                break;
                        case NUMBER:
                                rawLabel = p.getLabel();
                                input = new JSpinner();
                                JSpinner inputSpinner = (JSpinner)input;
                                inputSpinner.setModel(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
                                JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) inputSpinner.getEditor();
                                editor.getTextField().setColumns(5);
                                
                                break;
                        case TEXT:
                                rawLabel = p.getLabel();
                                input = new JTextArea();
                                ((JTextArea)input).setColumns(20);
                                ((JTextArea)input).setRows(3);
                                ((JTextArea)input).setWrapStyleWord(true);
                                ((JTextArea)input).getDocument().addDocumentListener(new DocumentListenerImpl(this));
                                break;
                        case OBJECT:
                                rawLabel = p.getLabel();
                                input = new JComboBox<>();
                                List<LinkedHashMap> itens = ( List<LinkedHashMap> ) p.getData();
                                DefaultComboBoxModel<LinkedHashMap> objectComboBoxModel = new DefaultComboBoxModel<>(itens.toArray(new LinkedHashMap[0]));
                                ((JComboBox) input).setModel(objectComboBoxModel);
                                if(!itens.isEmpty()) ((JComboBox) input).setSelectedIndex(0);
                                ((JComboBox) input).addActionListener((e) -> updateCountText());
                                ((JComboBox) input).setRenderer(new ObjectListCellRenderer());
                                break;
                        case DATE:
                                rawLabel = p.getLabel();
                                UtilDateModel dateModel = new UtilDateModel(new Date());
                                
                                Properties properties = new Properties();
                                properties.put("text.today", "Hoje");
                                properties.put("text.month", "Mes");
                                properties.put("text.year", "Ano");
                                
                                DateLabelFormatter formatter;
                                if (p.getData() != null && !p.getData().toString().isEmpty()) {
                                    formatter = new DateLabelFormatter(p.getData().toString());
                                } else {
                                    formatter = new DateLabelFormatter();
                                }
                                
                                input = new JDatePickerImpl(new JDatePanelImpl(dateModel, properties), formatter);
                                JDatePickerImpl inputDatePicker = (JDatePickerImpl) input;
                                inputDatePicker.getJFormattedTextField().getDocument().addDocumentListener(new DocumentListenerImpl(this));
                                inputDatePicker.getJFormattedTextField().setColumns(7);
                                break;
                }

                String label = rawLabel.split("\\.")[0].replace("_", " ") + ": ";
                JLabel txtLabel = new JLabel(label);
                
                final int finalIndex = rowIndex;
                final JLabel finalLabel = txtLabel;
                final JComponent finalInput = input;
                                
                SwingUtilities.invokeLater(() -> addCampoForm(finalIndex, finalLabel, finalInput));
                this.campos.put(rawLabel, input);
                rowIndex++;

        }
        final int structIndex = rowIndex;
        SwingUtilities.invokeLater(() -> addStruct(structIndex));
        rowIndex++;
        if(this.preset.getMidia()) {
            
            final JPanel campo = new JPanel();
            final int finalIndex = rowIndex;
            
            this.lblQtMidia = new JLabel("Nenhum arquivo carregado...");
            
            JButton btnCarregar = new JButton("Carregar...");
            btnCarregar.addActionListener(e -> {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Carregar Midia");
                fileChooser.setMultiSelectionEnabled(true);
                if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                    this.midias = Arrays.asList(fileChooser.getSelectedFiles());

                    this.lblQtMidia.setText(midias.size() + " midia" + (this.midias.size() > 1 ? "(s)" : "") + " selecionada" + (this.midias.size() > 1 ? "(s)" : "") + "...");
                }


            });
            
            JButton btnLimpar = new JButton("Limpar");
            btnLimpar.addActionListener((e) -> limparMidia());
            
            campo.setLayout(new BoxLayout(campo, BoxLayout.X_AXIS));
            Arrays.asList(new JLabel("Midia: "), this.lblQtMidia, Box.createHorizontalStrut(5), btnCarregar, Box.createHorizontalStrut(5), btnLimpar).forEach(campo::add);
            
            SwingUtilities.invokeLater(() -> {
                GridBagConstraints constraints = new GridBagConstraints();
                constraints.gridy = 1;
                this.panelFormWapper.add(Box.createVerticalStrut(5), constraints);
                constraints = new GridBagConstraints();
                constraints.gridy = 2;
                this.panelFormWapper.add(campo, constraints);
            });

        }

        SwingUtilities.invokeLater(() -> this.lblTemplate.setText(this.preset.getPath()));
        
        SwingUtilities.invokeLater(this::updateCountText);
	
    }
    
    private void limparMidia() {
		this.midias = null;
		this.lblQtMidia.setText("Nenhum arquivo carregado...");
	}
    
    private void addStruct(int row) {
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = 0;
        constraints.gridy = row;
        constraints.weightx = 1;
        constraints.weighty = 1;
        constraints.gridwidth = 2;
        
        this.panelCriarTweetForm.add(Box.createVerticalStrut(3), constraints);
    }
    
    private void addCampoForm(int row, JLabel label, JComponent input) {
        
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = 0;
        constraints.gridy = row;
        constraints.anchor = GridBagConstraints.LINE_END;
        constraints.insets = new Insets(3, 3, 3, 3);
        
        this.panelCriarTweetForm.add(label, constraints);
        constraints.gridx = 1;
        constraints.anchor = GridBagConstraints.LINE_START;
        this.panelCriarTweetForm.add(input, constraints);
    }
    
    public void setPreset(TweetPreset preset){
        this.preset = preset;
        gerarForm();
        this.update();
    }
	
    protected void updateCountText() {
            charCountUpdate();
            this.lblCounter.setText(String.format("%d/%d", this.charCount, TweetPreset.MAX_TWEET_SIZE));
            this.lblCounter.setForeground((this.charCount > TweetPreset.MAX_TWEET_SIZE) ? java.awt.Color.RED : java.awt.Color.BLACK);
    }
	
    private void charCountUpdate() {
            this.charCount = doEncode().length();
    }
    
    private boolean existeCampo(String rawCampo) {
        final boolean[] encontrou = new boolean[]{false};
        campos.forEach((nome, campo) -> {
                if(nome.split("\\.")[0].equals(rawCampo.split("\\.")[0])) encontrou[0] = true;
        });

        return encontrou[0];
    }
	
    private String doEncode() {
            HashMap<String, String> params = new HashMap<>();

            for(Map.Entry<String, JComponent> entry : campos.entrySet()) {

                    String value = "NAN";
                    String paramName = entry.getKey();

                    if (entry.getValue() instanceof JTextField) {
                            value = ((JTextField)entry.getValue()).getText();
                    } else if (entry.getValue() instanceof JComboBox) {
                            Object comboValue = ((JComboBox) entry.getValue()).getSelectedItem();
                            if(comboValue == null) {
                                    value = "";
                            } else {
                                    String[] infoPartes = paramName.split("\\.");
                                    if(infoPartes.length > 1) {
                                            for(Object o : ((LinkedHashMap) comboValue).keySet()) {
                                                    params.put(infoPartes[0] + "." + o.toString(), ((LinkedHashMap) comboValue).get(o).toString());
                                            }

                                            continue;
                                    } else {
                                            value = (String) comboValue;
                                    }
                            }
                    } else if (entry.getValue() instanceof JSpinner) {
                            value = String.valueOf(((JSpinner) entry.getValue()).getValue());
                    } else if (entry.getValue() instanceof JTextArea) {
                            value = ((JTextArea) entry.getValue()).getText();
                    } else if (entry.getValue() instanceof JDatePickerImpl) {
                            JDatePickerImpl picker = ((JDatePickerImpl) entry.getValue());
                            value = picker.getJFormattedTextField().getText();
                    }

                    params.put(paramName, value);
            }

            return TweetPresetFactory.encode(preset.getPreset(), params);
    }
    
    private void runTask(Callback task){
        if(this.worker == null){
            this.worker = new TaskWorker(() ->{
                this.worker = null;
            }, task);
            this.worker.execute();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopiarTweet;
    private javax.swing.JButton btnGerarTweet;
    private javax.swing.JButton btnLimparCampos;
    private javax.swing.JCheckBox jcbForcarMaiusculo;
    private javax.swing.JLabel lblCounter;
    private javax.swing.JLabel lblCriarTweet;
    private javax.swing.JLabel lblTemplate;
    private javax.swing.JPanel panelBotoes;
    private javax.swing.JPanel panelCriarTweetForm;
    private javax.swing.JPanel panelFormWapper;
    // End of variables declaration//GEN-END:variables

    private void configurarComponents() {
        SwingUtilities.invokeLater(() -> {
            //this.panelFormWapper.setLayout(new GridBagLayout());
            //this.panelCriarTweetForm.setLayout(new GridBagLayout());
            //this.panelCriarTweetForm.setAlignmentX(Component.CENTER_ALIGNMENT);
        });
    }
}

class DocumentListenerImpl implements DocumentListener{
    
    private CreateTweetView view;
    
    public DocumentListenerImpl(CreateTweetView view){
        this.view = view;
    }
    
    @Override
    public void insertUpdate(DocumentEvent e) {
        
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
       this.view.updateCountText();
    }
    
}

class DateLabelFormatter extends JFormattedTextField.AbstractFormatter {

    private SimpleDateFormat dateFormatter;

    public DateLabelFormatter() {
        this.dateFormatter = new SimpleDateFormat("dd/MM/yyyy");
    }

    public DateLabelFormatter(String datePattern) {
        this.dateFormatter = new SimpleDateFormat(datePattern);
    }

    @Override
    public Object stringToValue(String text) throws ParseException {
        return dateFormatter.parseObject(text);
    }

    @Override
    public String valueToString(Object value) throws ParseException {
        if (value != null) {
            Calendar cal = (Calendar) value;
            return dateFormatter.format(cal.getTime());
        }

        return "";
    }

}
